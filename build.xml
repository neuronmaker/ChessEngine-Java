<project name="Chess Engine" default="jar" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<description>
		A chess engine written in Java
	</description>
	<!-- global properties -->
	<property name="verbose.output" value="false"/>
	<property name="src.dir" location="src"/>
	<property name="build.dir" location="build"/>
	<property name="dist.dir" location="dist"/>
	<property name="test.dir" location="test"/>
	<property name="classes.dir" location="${build.dir}/classes"/>
	<property name="test.classes.dir" value="build/tests"/>
	<property name="doc.dir" location="doc"/>
	<property name="report.dir" location="report"/>
	<property name="Main-Class" value="com.dalton.ChessEngine.Main"/>
	<property name="jar.file" location="dist/ChessEngine.jar"/>
	<property name="report.dir" location="report" />

	<path id="classpath.base">
		<pathelement location="${classes.dir}"/>
	</path>

	<path id="classpath.test">
		<pathelement location="${user.home}/.ant/lib/ant-junit.jar"/>
		<pathelement location="${user.home}/.ant/lib/junit.jar"/>
		<pathelement location="${test.classes.dir}"/>
		<path refid="classpath.base"/>
	</path>

	<condition property="libs.installed">
		<and>
			<isset property="junit.installed"/>
			<isset property="hamcrest.installed"/>
		</and>
	</condition>

	<target name="install-junit" unless="libs.installed" >
		<mkdir dir="${user.home}/.ant/lib"/>
		<get dest="${user.home}/.ant/lib/junit.jar" src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar" unless:set="junit.installed"/>
		<get dest="${user.home}/.ant/lib/ant-junit.jar" src="http://search.maven.org/remotecontent?filepath=org/apache/ant/ant-junit/1.9.6/ant-junit-1.9.6.jar" unless:set="junit.installed"/>
		<get dest="${user.home}/.ant/lib/hamcrest-core.jar" src="http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" unless:set="hamcrest.installed"/>
		<fail message="Required libraries installed. Re-run the build"/>
	</target>

	<target name="init">
		<!-- time stamp -->
		<tstamp/>
		<!-- Create a build directory -->
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${report.dir}"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<target name="javadoc" description="Generate the Javadoc Documentation files">
		<javadoc
				packagenames="com.dalton.*"
				sourcepath="${src.dir}" destdir="${doc.dir}"
				author="true" version="true"
				windowTitle="${ant.project.name}"
				private="true"
				linksource="yes">
			<bottom><![CDATA[<i>Copyright &#169; Dalton Herrewynen.</i>]]></bottom>
		</javadoc>
	</target>

	<target name="compile" depends="init" description="compile the source">
		<mkdir dir="${classes.dir}"/>
		<javac srcdir="${src.dir}" destdir="${classes.dir}"/>
	</target>

	<target name="jar" depends="compile" description="generate the distributable JAR file">
		<mkdir dir="${dist.dir}"/>
		<!-- Put everything in ${build} into the ChessEngine.jar file -->
		<jar jarfile="${dist.dir}/ChessEngine.jar" basedir="${classes.dir}">
			<manifest><attribute name="Main-Class" value="${Main-Class}"/></manifest>
		</jar>
		<exec executable="cp">
			<arg value="./launch.sh"/>
			<arg value="${dist.dir}/launch.sh"/>
		</exec>
	</target>

	<target name="run" depends="jar" description="Run the program">
		<java jar="${jar.file}" fork="true">
			<arg line="${args}"/>
		</java>
	</target>

	<target name="clean-tests">
		<delete dir="${test.classes.dir}"/>
	</target>

	<target name="compile-test" depends="compile">
		<mkdir dir="${test.classes.dir}"/>
		<javac srcdir="${test.dir}" destdir="${test.classes.dir}" verbose="${verbose.output}" includeantruntime="false" debug="on">
			<classpath refid="classpath.test"/>
		</javac>
	</target>

	<target name="run-tests" depends="compile-test">
		<junit printsummary="no" haltonfailure="no">
			<classpath refid="classpath.test"/>
			<batchtest todir="${report.dir}">
				<fileset dir="${test.classes.dir}">
					<include name="**/*Test*"/>
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<formatter type="brief" usefile="false"/>
		</junit>
	</target>

	<target name="test" depends="clean,run-tests" description="Generate Test Report">
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${report.dir}/html"/>
		</junitreport>
		<delete>
			<fileset dir="${report.dir}" includes="TEST*.xml"/>
		</delete>
	</target>

	<target name="clean" description="Clean up, remove build files and documentation">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${report.dir}"/>
		<delete dir="${doc.dir}"/>
		<delete dir="out"/>
	</target>
</project>